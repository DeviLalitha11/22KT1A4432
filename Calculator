from flask import Flask, jsonify
import requests
from collections import deque
import threading

app = Flask(_name_)

# Configuration
WINDOW_SIZE = 10
SERVER_URLS = {
    'p': "http://20.244.56.144/test/primes",
    'f': "http://20.244.56.144/test/fibo",
    'e': "http://20.244.56.144/test/even",
    'r': "http://20.244.56.144/test/rand"
}
TIMEOUT = 0.5  # 500 milliseconds

# Store unique numbers with a deque to handle the window size
number_store = {
    'p': deque(maxlen=WINDOW_SIZE),
    'f': deque(maxlen=WINDOW_SIZE),
    'e': deque(maxlen=WINDOW_SIZE),
    'r': deque(maxlen=WINDOW_SIZE)
}

lock = threading.Lock()

def fetch_numbers(number_type):
    try:
        response = requests.get(SERVER_URLS[number_type], timeout=TIMEOUT)
        response.raise_for_status()
        return response.json().get("numbers", [])
    except (requests.exceptions.RequestException, ValueError):
        return []

def calculate_average(numbers):
    if not numbers:
        return 0.0
    return round(sum(numbers) / len(numbers), 2)

@app.route('/numbers/<number_type>', methods=['GET'])
def get_numbers(number_type):
    if number_type not in SERVER_URLS:
        return jsonify({"error": "Invalid number type"}), 400

    with lock:
        prev_state = list(number_store[number_type])
        new_numbers = fetch_numbers(number_type)

        # Add new unique numbers
        for number in new_numbers:
            if number not in number_store[number_type]:
                number_store[number_type].append(number)
                if len(number_store[number_type]) >= WINDOW_SIZE:
                    break

        curr_state = list(number_store[number_type])
        average = calculate_average(curr_state)

    response = {
        "windowPrevState": prev_state,
        "windowCurrState": curr_state,
        "numbers": new_numbers,
        "avg": average
    }
    return jsonify(response)

if _name_ == '_main_':
    app.run(host='0.0.0.0', port=9876)
